// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthUserServiceClient is the client API for AuthUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthUserServiceClient interface {
	UserAuthorized(ctx context.Context, in *UserAuthorizedRequest, opts ...grpc.CallOption) (*UserAuthorizedResponse, error)
}

type authUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthUserServiceClient(cc grpc.ClientConnInterface) AuthUserServiceClient {
	return &authUserServiceClient{cc}
}

func (c *authUserServiceClient) UserAuthorized(ctx context.Context, in *UserAuthorizedRequest, opts ...grpc.CallOption) (*UserAuthorizedResponse, error) {
	out := new(UserAuthorizedResponse)
	err := c.cc.Invoke(ctx, "/ms.auth.AuthUserService/UserAuthorized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthUserServiceServer is the server API for AuthUserService service.
// All implementations should embed UnimplementedAuthUserServiceServer
// for forward compatibility
type AuthUserServiceServer interface {
	UserAuthorized(context.Context, *UserAuthorizedRequest) (*UserAuthorizedResponse, error)
}

// UnimplementedAuthUserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthUserServiceServer struct {
}

func (UnimplementedAuthUserServiceServer) UserAuthorized(context.Context, *UserAuthorizedRequest) (*UserAuthorizedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAuthorized not implemented")
}

// UnsafeAuthUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthUserServiceServer will
// result in compilation errors.
type UnsafeAuthUserServiceServer interface {
	mustEmbedUnimplementedAuthUserServiceServer()
}

func RegisterAuthUserServiceServer(s grpc.ServiceRegistrar, srv AuthUserServiceServer) {
	s.RegisterService(&AuthUserService_ServiceDesc, srv)
}

func _AuthUserService_UserAuthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuthorizedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).UserAuthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ms.auth.AuthUserService/UserAuthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).UserAuthorized(ctx, req.(*UserAuthorizedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthUserService_ServiceDesc is the grpc.ServiceDesc for AuthUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ms.auth.AuthUserService",
	HandlerType: (*AuthUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserAuthorized",
			Handler:    _AuthUserService_UserAuthorized_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

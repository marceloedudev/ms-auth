// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/usecase/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "ms-auth/internal/user/domain"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockPgRepository is a mock of PgRepository interface.
type MockPgRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPgRepositoryMockRecorder
}

// MockPgRepositoryMockRecorder is the mock recorder for MockPgRepository.
type MockPgRepositoryMockRecorder struct {
	mock *MockPgRepository
}

// NewMockPgRepository creates a new mock instance.
func NewMockPgRepository(ctrl *gomock.Controller) *MockPgRepository {
	mock := &MockPgRepository{ctrl: ctrl}
	mock.recorder = &MockPgRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgRepository) EXPECT() *MockPgRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPgRepository) Create(ctx context.Context, e *domain.User) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, e)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPgRepositoryMockRecorder) Create(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPgRepository)(nil).Create), ctx, e)
}

// Destroy mocks base method.
func (m *MockPgRepository) Destroy(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockPgRepositoryMockRecorder) Destroy(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockPgRepository)(nil).Destroy), ctx, userID)
}

// FindByID mocks base method.
func (m *MockPgRepository) FindByID(ctx context.Context, userID int64) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, userID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockPgRepositoryMockRecorder) FindByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPgRepository)(nil).FindByID), ctx, userID)
}

// FindByUsernameOrEmail mocks base method.
func (m *MockPgRepository) FindByUsernameOrEmail(ctx context.Context, username, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsernameOrEmail", ctx, username, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsernameOrEmail indicates an expected call of FindByUsernameOrEmail.
func (mr *MockPgRepositoryMockRecorder) FindByUsernameOrEmail(ctx, username, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsernameOrEmail", reflect.TypeOf((*MockPgRepository)(nil).FindByUsernameOrEmail), ctx, username, email)
}

// Update mocks base method.
func (m *MockPgRepository) Update(ctx context.Context, userID int64, u *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, userID, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPgRepositoryMockRecorder) Update(ctx, userID, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPgRepository)(nil).Update), ctx, userID, u)
}

// MockRedisRepository is a mock of RedisRepository interface.
type MockRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRedisRepositoryMockRecorder
}

// MockRedisRepositoryMockRecorder is the mock recorder for MockRedisRepository.
type MockRedisRepositoryMockRecorder struct {
	mock *MockRedisRepository
}

// NewMockRedisRepository creates a new mock instance.
func NewMockRedisRepository(ctrl *gomock.Controller) *MockRedisRepository {
	mock := &MockRedisRepository{ctrl: ctrl}
	mock.recorder = &MockRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisRepository) EXPECT() *MockRedisRepositoryMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockRedisRepository) Del(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockRedisRepositoryMockRecorder) Del(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockRedisRepository)(nil).Del), key)
}

// Expire mocks base method.
func (m *MockRedisRepository) Expire(key string, expiration time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", key, expiration)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Expire indicates an expected call of Expire.
func (mr *MockRedisRepositoryMockRecorder) Expire(key, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockRedisRepository)(nil).Expire), key, expiration)
}

// Get mocks base method.
func (m *MockRedisRepository) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRedisRepositoryMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisRepository)(nil).Get), key)
}

// Set mocks base method.
func (m *MockRedisRepository) Set(key string, value interface{}, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRedisRepositoryMockRecorder) Set(key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisRepository)(nil).Set), key, value, expiration)
}

// ZAddNX mocks base method.
func (m *MockRedisRepository) ZAddNX(key string, score float64, member interface{}) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZAddNX", key, score, member)
	ret0, _ := ret[0].(int64)
	return ret0
}

// ZAddNX indicates an expected call of ZAddNX.
func (mr *MockRedisRepositoryMockRecorder) ZAddNX(key, score, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddNX", reflect.TypeOf((*MockRedisRepository)(nil).ZAddNX), key, score, member)
}

// ZRange mocks base method.
func (m *MockRedisRepository) ZRange(key string, start, stop int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRange", key, start, stop)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRange indicates an expected call of ZRange.
func (mr *MockRedisRepositoryMockRecorder) ZRange(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRange", reflect.TypeOf((*MockRedisRepository)(nil).ZRange), key, start, stop)
}

// ZRemRangeByScore mocks base method.
func (m *MockRedisRepository) ZRemRangeByScore(key, min, max string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRemRangeByScore", key, min, max)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRemRangeByScore indicates an expected call of ZRemRangeByScore.
func (mr *MockRedisRepositoryMockRecorder) ZRemRangeByScore(key, min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRemRangeByScore", reflect.TypeOf((*MockRedisRepository)(nil).ZRemRangeByScore), key, min, max)
}

// MockUseCaseUser is a mock of UseCaseUser interface.
type MockUseCaseUser struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseUserMockRecorder
}

// MockUseCaseUserMockRecorder is the mock recorder for MockUseCaseUser.
type MockUseCaseUserMockRecorder struct {
	mock *MockUseCaseUser
}

// NewMockUseCaseUser creates a new mock instance.
func NewMockUseCaseUser(ctrl *gomock.Controller) *MockUseCaseUser {
	mock := &MockUseCaseUser{ctrl: ctrl}
	mock.recorder = &MockUseCaseUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaseUser) EXPECT() *MockUseCaseUserMockRecorder {
	return m.recorder
}

// InfoAccessToken mocks base method.
func (m *MockUseCaseUser) InfoAccessToken(token string) (*domain.UserDataToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfoAccessToken", token)
	ret0, _ := ret[0].(*domain.UserDataToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InfoAccessToken indicates an expected call of InfoAccessToken.
func (mr *MockUseCaseUserMockRecorder) InfoAccessToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoAccessToken", reflect.TypeOf((*MockUseCaseUser)(nil).InfoAccessToken), token)
}

// InfoRefreshToken mocks base method.
func (m *MockUseCaseUser) InfoRefreshToken(token string) (*domain.UserDataToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfoRefreshToken", token)
	ret0, _ := ret[0].(*domain.UserDataToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InfoRefreshToken indicates an expected call of InfoRefreshToken.
func (mr *MockUseCaseUserMockRecorder) InfoRefreshToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoRefreshToken", reflect.TypeOf((*MockUseCaseUser)(nil).InfoRefreshToken), token)
}

// InfoToken mocks base method.
func (m *MockUseCaseUser) InfoToken(token string) (*domain.UserDataToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfoToken", token)
	ret0, _ := ret[0].(*domain.UserDataToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InfoToken indicates an expected call of InfoToken.
func (mr *MockUseCaseUserMockRecorder) InfoToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoToken", reflect.TypeOf((*MockUseCaseUser)(nil).InfoToken), token)
}

// InfoUser mocks base method.
func (m *MockUseCaseUser) InfoUser(ctx context.Context, token string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfoUser", ctx, token)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InfoUser indicates an expected call of InfoUser.
func (mr *MockUseCaseUserMockRecorder) InfoUser(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoUser", reflect.TypeOf((*MockUseCaseUser)(nil).InfoUser), ctx, token)
}

// LoginUser mocks base method.
func (m *MockUseCaseUser) LoginUser(ctx context.Context, username, password string) (*domain.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, username, password)
	ret0, _ := ret[0].(*domain.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUseCaseUserMockRecorder) LoginUser(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUseCaseUser)(nil).LoginUser), ctx, username, password)
}

// RefreshUserToken mocks base method.
func (m *MockUseCaseUser) RefreshUserToken(ctx context.Context, refreshToken string) (*domain.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshUserToken", ctx, refreshToken)
	ret0, _ := ret[0].(*domain.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshUserToken indicates an expected call of RefreshUserToken.
func (mr *MockUseCaseUserMockRecorder) RefreshUserToken(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshUserToken", reflect.TypeOf((*MockUseCaseUser)(nil).RefreshUserToken), ctx, refreshToken)
}

// RegisterUser mocks base method.
func (m *MockUseCaseUser) RegisterUser(ctx context.Context, username, first_name, last_name, password, email string) (*domain.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, username, first_name, last_name, password, email)
	ret0, _ := ret[0].(*domain.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUseCaseUserMockRecorder) RegisterUser(ctx, username, first_name, last_name, password, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUseCaseUser)(nil).RegisterUser), ctx, username, first_name, last_name, password, email)
}

// RequestLimit mocks base method.
func (m *MockUseCaseUser) RequestLimit(key string, maxAttempts, timeInterval int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestLimit", key, maxAttempts, timeInterval)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestLimit indicates an expected call of RequestLimit.
func (mr *MockUseCaseUserMockRecorder) RequestLimit(key, maxAttempts, timeInterval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestLimit", reflect.TypeOf((*MockUseCaseUser)(nil).RequestLimit), key, maxAttempts, timeInterval)
}

// RevokeAccessToken mocks base method.
func (m *MockUseCaseUser) RevokeAccessToken(token string) (*domain.UserDataToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAccessToken", token)
	ret0, _ := ret[0].(*domain.UserDataToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAccessToken indicates an expected call of RevokeAccessToken.
func (mr *MockUseCaseUserMockRecorder) RevokeAccessToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAccessToken", reflect.TypeOf((*MockUseCaseUser)(nil).RevokeAccessToken), token)
}

// RevokeRefreshToken mocks base method.
func (m *MockUseCaseUser) RevokeRefreshToken(token string) (*domain.UserDataToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeRefreshToken", token)
	ret0, _ := ret[0].(*domain.UserDataToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeRefreshToken indicates an expected call of RevokeRefreshToken.
func (mr *MockUseCaseUserMockRecorder) RevokeRefreshToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRefreshToken", reflect.TypeOf((*MockUseCaseUser)(nil).RevokeRefreshToken), token)
}

// RevokeToken mocks base method.
func (m *MockUseCaseUser) RevokeToken(token string) (*domain.UserDataToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeToken", token)
	ret0, _ := ret[0].(*domain.UserDataToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeToken indicates an expected call of RevokeToken.
func (mr *MockUseCaseUserMockRecorder) RevokeToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeToken", reflect.TypeOf((*MockUseCaseUser)(nil).RevokeToken), token)
}

// RevokeUser mocks base method.
func (m *MockUseCaseUser) RevokeUser(token, tokenGrantType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeUser", token, tokenGrantType)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeUser indicates an expected call of RevokeUser.
func (mr *MockUseCaseUserMockRecorder) RevokeUser(token, tokenGrantType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeUser", reflect.TypeOf((*MockUseCaseUser)(nil).RevokeUser), token, tokenGrantType)
}

// SaveAccessToken mocks base method.
func (m *MockUseCaseUser) SaveAccessToken(token, data string, expireTime time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccessToken", token, data, expireTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAccessToken indicates an expected call of SaveAccessToken.
func (mr *MockUseCaseUserMockRecorder) SaveAccessToken(token, data, expireTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccessToken", reflect.TypeOf((*MockUseCaseUser)(nil).SaveAccessToken), token, data, expireTime)
}

// SaveRefreshToken mocks base method.
func (m *MockUseCaseUser) SaveRefreshToken(token, data string, expireTime time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRefreshToken", token, data, expireTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRefreshToken indicates an expected call of SaveRefreshToken.
func (mr *MockUseCaseUserMockRecorder) SaveRefreshToken(token, data, expireTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRefreshToken", reflect.TypeOf((*MockUseCaseUser)(nil).SaveRefreshToken), token, data, expireTime)
}

// SaveToken mocks base method.
func (m *MockUseCaseUser) SaveToken(user *domain.User) (*domain.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveToken", user)
	ret0, _ := ret[0].(*domain.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveToken indicates an expected call of SaveToken.
func (mr *MockUseCaseUserMockRecorder) SaveToken(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveToken", reflect.TypeOf((*MockUseCaseUser)(nil).SaveToken), user)
}
